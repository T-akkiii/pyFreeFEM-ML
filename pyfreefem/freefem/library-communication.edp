// Python-FreeFEM通信ライブラリ
// 共有メモリを使用してPythonとFreeFEM間でデータを交換するための関数を提供します

// mmap-semaphore.soプラグインをロード
load "mmap-semaphore" 

// デフォルトの共有メモリ名
string default_shm_name = "pyfreefem_shm";
int default_shm_size = 1048576; // 1MB

// 共有メモリセグメントの作成と初期化
func int init_shared_memory(string name, int size)
{
    try {
        return mmap_create(name, size);
    }
    catch(...) {
        cout << "Error: Failed to create shared memory segment '" << name << "'" << endl;
        return -1;
    }
}

// 共有メモリセグメントの破棄
func void destroy_shared_memory(string name)
{
    try {
        mmap_destroy(name);
    }
    catch(...) {
        cout << "Warning: Failed to destroy shared memory segment '" << name << "'" << endl;
    }
}

// int型データの読み込み
func int readIntData(string key, string shm_name = default_shm_name)
{
    try {
        // キーに対応するデータの位置を特定
        string pos_key = "pos_" + key;
        ifstream f("/dev/shm/" + shm_name + "_" + pos_key);
        int pos;
        f >> pos;
        
        // データを読み込む
        ifstream data("/dev/shm/" + shm_name, binary);
        data.seekg(pos);
        int value;
        data.read(value);
        
        return value;
    }
    catch(...) {
        cout << "Error: Failed to read int data for key '" << key << "'" << endl;
        return 0;
    }
}

// double型データの読み込み
func real readDoubleData(string key, string shm_name = default_shm_name)
{
    try {
        // キーに対応するデータの位置を特定
        string pos_key = "pos_" + key;
        ifstream f("/dev/shm/" + shm_name + "_" + pos_key);
        int pos;
        f >> pos;
        
        // データを読み込む
        ifstream data("/dev/shm/" + shm_name, binary);
        data.seekg(pos);
        real value;
        data.read(value);
        
        return value;
    }
    catch(...) {
        cout << "Error: Failed to read double data for key '" << key << "'" << endl;
        return 0.0;
    }
}

// string型データの読み込み
func string readStringData(string key, string shm_name = default_shm_name)
{
    try {
        // キーに対応するデータの位置を特定
        string pos_key = "pos_" + key;
        ifstream f("/dev/shm/" + shm_name + "_" + pos_key);
        int pos, len;
        f >> pos >> len;
        
        // データを読み込む
        ifstream data("/dev/shm/" + shm_name, binary);
        data.seekg(pos);
        char[int] buffer(len+1);
        for(int i = 0; i < len; i++) {
            data.read(buffer[i]);
        }
        buffer[len] = 0; // null終端
        
        return string(buffer);
    }
    catch(...) {
        cout << "Error: Failed to read string data for key '" << key << "'" << endl;
        return "";
    }
}

// 配列データの読み込み
func void readArrayData(string key, real[int] &array, string shm_name = default_shm_name)
{
    try {
        // キーに対応するデータの位置を特定
        string pos_key = "pos_" + key;
        ifstream f("/dev/shm/" + shm_name + "_" + pos_key);
        int pos, len;
        f >> pos >> len;
        
        // 配列サイズの確認
        if (len != array.n) {
            cout << "Warning: Array size mismatch. Expected " << array.n << " but got " << len << endl;
        }
        
        // データを読み込む
        ifstream data("/dev/shm/" + shm_name, binary);
        data.seekg(pos);
        int n = min(len, array.n);
        for(int i = 0; i < n; i++) {
            data.read(array[i]);
        }
    }
    catch(...) {
        cout << "Error: Failed to read array data for key '" << key << "'" << endl;
    }
}

// int型データの書き込み
func void writeIntData(string key, int value, string shm_name = default_shm_name)
{
    try {
        // データの位置を特定（既存の場合）または新しく割り当て
        string meta_file = "/dev/shm/" + shm_name + "_meta";
        int pos = -1;
        
        {
            ifstream f(meta_file);
            if (f) {
                string line;
                while (getline(f, line)) {
                    string curr_key;
                    int curr_pos;
                    stringstream ss(line);
                    ss >> curr_key >> curr_pos;
                    if (curr_key == key) {
                        pos = curr_pos;
                        break;
                    }
                }
            }
        }
        
        if (pos == -1) {
            // 新しい位置を割り当て
            ifstream f("/dev/shm/" + shm_name + "_next_pos");
            if (f) {
                f >> pos;
            } else {
                pos = 0;
            }
            
            // メタデータに追加
            ofstream meta(meta_file, append);
            meta << key << " " << pos << endl;
            
            // 次の位置を更新
            ofstream next_pos("/dev/shm/" + shm_name + "_next_pos");
            next_pos << (pos + sizeof(int)) << endl;
        }
        
        // データを書き込む
        ofstream data("/dev/shm/" + shm_name, binary);
        data.seekp(pos);
        data.write(value);
        
        // 位置情報を保存
        ofstream pos_file("/dev/shm/" + shm_name + "_pos_" + key);
        pos_file << pos << endl;
    }
    catch(...) {
        cout << "Error: Failed to write int data for key '" << key << "'" << endl;
    }
}

// double型データの書き込み
func void writeDoubleData(string key, real value, string shm_name = default_shm_name)
{
    try {
        // データの位置を特定（既存の場合）または新しく割り当て
        string meta_file = "/dev/shm/" + shm_name + "_meta";
        int pos = -1;
        
        {
            ifstream f(meta_file);
            if (f) {
                string line;
                while (getline(f, line)) {
                    string curr_key;
                    int curr_pos;
                    stringstream ss(line);
                    ss >> curr_key >> curr_pos;
                    if (curr_key == key) {
                        pos = curr_pos;
                        break;
                    }
                }
            }
        }
        
        if (pos == -1) {
            // 新しい位置を割り当て
            ifstream f("/dev/shm/" + shm_name + "_next_pos");
            if (f) {
                f >> pos;
            } else {
                pos = 0;
            }
            
            // メタデータに追加
            ofstream meta(meta_file, append);
            meta << key << " " << pos << endl;
            
            // 次の位置を更新
            ofstream next_pos("/dev/shm/" + shm_name + "_next_pos");
            next_pos << (pos + sizeof(real)) << endl;
        }
        
        // データを書き込む
        ofstream data("/dev/shm/" + shm_name, binary);
        data.seekp(pos);
        data.write(value);
        
        // 位置情報を保存
        ofstream pos_file("/dev/shm/" + shm_name + "_pos_" + key);
        pos_file << pos << endl;
    }
    catch(...) {
        cout << "Error: Failed to write double data for key '" << key << "'" << endl;
    }
}

// 配列データの書き込み
func void writeArrayData(string key, real[int] &array, string shm_name = default_shm_name)
{
    try {
        // データの位置を特定（既存の場合）または新しく割り当て
        string meta_file = "/dev/shm/" + shm_name + "_meta";
        int pos = -1;
        
        {
            ifstream f(meta_file);
            if (f) {
                string line;
                while (getline(f, line)) {
                    string curr_key;
                    int curr_pos;
                    stringstream ss(line);
                    ss >> curr_key >> curr_pos;
                    if (curr_key == key) {
                        pos = curr_pos;
                        break;
                    }
                }
            }
        }
        
        if (pos == -1) {
            // 新しい位置を割り当て
            ifstream f("/dev/shm/" + shm_name + "_next_pos");
            if (f) {
                f >> pos;
            } else {
                pos = 0;
            }
            
            // メタデータに追加
            ofstream meta(meta_file, append);
            meta << key << " " << pos << endl;
            
            // 次の位置を更新
            ofstream next_pos("/dev/shm/" + shm_name + "_next_pos");
            next_pos << (pos + array.n * sizeof(real)) << endl;
        }
        
        // データを書き込む
        ofstream data("/dev/shm/" + shm_name, binary);
        data.seekp(pos);
        for(int i = 0; i < array.n; i++) {
            data.write(array[i]);
        }
        
        // 位置情報を保存
        ofstream pos_file("/dev/shm/" + shm_name + "_pos_" + key);
        pos_file << pos << " " << array.n << endl;
    }
    catch(...) {
        cout << "Error: Failed to write array data for key '" << key << "'" << endl;
    }
}

// 初期化処理
init_shared_memory(default_shm_name, default_shm_size);
cout << "Library communication loaded successfully" << endl; 